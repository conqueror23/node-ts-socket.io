{
  "name": "node-ts-socket-io",
  "version": "1.0.0",
  "description": "Minimalistic socket.io repo to send chats to your front-end or backend",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "dev:socket": "tsc && node dist/socket-io/index.js",
    "dev:apollo": "ts-node src/appolo/index.ts",
    "dev:fastify": "ts-node src/fastify/index.ts",
    "start:socket": "npm run build && node dist/socket-io/index.js",
    "start:apollo": "npm run build && node dist/appolo/index.js",
    "start:fastify": "npm run build && node dist/fastify/index.js",
    "clean": "rm -rf dist",
    "db:start": "docker-compose up -d",
    "db:stop": "docker-compose down",
    "db:reset": "docker-compose down -v && docker-compose up -d",
    "db:migrate": "docker-compose exec postgres psql -U postgres -d portfolio_db -f /docker-entrypoint-initdb.d/01-schema.sql",
    "db:seed": "docker-compose exec postgres psql -U postgres -d portfolio_db -f /docker-entrypoint-initdb.d/02-sample-data.sql",
    "db:migrate:up": "npm run db:migrate && npm run db:seed",
    "db:migrate:down": "docker-compose exec postgres psql -U postgres -d portfolio_db -c 'DROP SCHEMA public CASCADE; CREATE SCHEMA public;'",
    "db:logs": "docker-compose logs -f postgres",
    "db:setup": "cp .env.example .env && npm run db:start && sleep 5 && ts-node src/database/setup.ts"
  },
  "devDependencies": {
    "@types/express": "^4.17.23",
    "@types/node": "^24.0.7",
    "@types/socket.io": "^3.0.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "@fastify/cors": "^11.0.1",
    "@types/pg": "^8.15.4",
    "apollo-server": "^3.13.0",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "fastify": "^5.4.0",
    "graphql": "^16.11.0",
    "pg": "^8.16.3",
    "socket.io": "^4.8.1"
  }
}
